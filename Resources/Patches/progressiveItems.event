PUSH; ORG $A7430; jumpToHack(progressiveItems); POP
ALIGN 4
progressiveItems:
#incbin "asm/progressiveItems.dmp"
POIN progressiveItemsTable
POIN ($A7430+0x08)|1 //return offset
POIN dojoProgressive
POIN extraProgressive

//table to determine which item each sub id of item 0x05 gives
extraProgressive:
BYTE 0x01 //0x00 -> Sword
BYTE 0x09 //0x01 -> Bow
BYTE 0x0B //0x02 -> Boomerang
BYTE 0x0D //0x03 -> Shield

ALIGN 4
progressiveItemsTable:
POIN progressiveSwordIDs progressiveSwordFlags
//POIN progressiveBombIDs progressiveBombFlags
POIN progressiveBowIDs progressiveBowFlags
POIN progressiveBoomerangIDs progressiveBoomerangFlags
POIN progressiveShieldIDs progressiveShieldFlags
POIN progressiveSpinScrollIDs progressiveSpinScrollFlags
POIN progressiveGreatScrollIDs progressiveGreatScrollFlags
POIN progressiveKinstoneBagIDs progressiveKinstoneBagFlags
POIN progressiveBadSwordIDs progressiveBadSwordFlags
WORD -1 //terminator

progressiveSwordIDs:
BYTE 0x01 //Smith's Sword
BYTE 0x02 //White Sword
BYTE 0x03 //White Sword (2 elements)
BYTE 0x04 //White Sword (3 elements)
BYTE 0x06 //Four Sword
BYTE 0xFF //terminator
BYTE 0x06 //item to give if the progressive item is maxed

//progressiveBombIDs:
//BYTE 0x07 //Bombs
//BYTE 0x08 //Remote Bombs
//BYTE 0xFF //terminator
//BYTE 0x00 //item to give if the progressive item is maxed

progressiveBowIDs:
BYTE 0x09 //Bow
BYTE 0x0A //Light Arrow
BYTE 0xFF //terminator
BYTE 0x0A //item to give if the progressive item is maxed

progressiveBoomerangIDs:
BYTE 0x0B //Boomerang
BYTE 0x0C //Magical Boomerang
BYTE 0xFF //terminator
BYTE 0x0C //item to give if the progressive item is maxed

progressiveShieldIDs:
BYTE 0x0D //Small Shield
BYTE 0x0E //Mirror Shield
BYTE 0xFF //terminator
BYTE 0x0E //item to give if the progressive item is maxed

progressiveSpinScrollIDs:
BYTE 0x48 //Spin attack
BYTE 0xFF //terminator
BYTE 0x48 //item to give if the progressive item is maxed

progressiveGreatScrollIDs:
BYTE 0x4D //Great spin attack
BYTE 0xFF //terminator
BYTE 0x4D //item to give if the progressive item is maxed

progressiveKinstoneBagIDs:
BYTE 0x67 //Kinstone Bag
BYTE 0xFF //terminator
BYTE 0x67 //item to give if the progressive item is maxed

progressiveBadSwordIDs:
BYTE 0x05 //Lantern Sword
BYTE 0xFF //terminator
BYTE 0x05 //item to give if the progressive item is maxed

progressiveSwordFlags:
BYTE 0x00 0x0C //Smith's Sword
BYTE 0x00 0x30 //White Sword
BYTE 0x00 0xC0 //White Sword (2 elements)
BYTE 0x01 0x03 //White Sword (3 elements)
BYTE 0x01 0x30 //Four Sword
BYTE 0xFF //terminator

//progressiveBombFlags:
//BYTE 0x01 0xC0 //Bombs
//BYTE 0x02 0x03 //Remote Bombs
//BYTE 0xFF //terminator

progressiveBowFlags:
BYTE 0x02 0x0C //Bow
BYTE 0x02 0x30 //Light Arrow
BYTE 0xFF //terminator

progressiveBoomerangFlags:
BYTE 0x02 0xC0 //Boomerang
BYTE 0x03 0x03 //Magical Boomerang
BYTE 0xFF //terminator

progressiveShieldFlags:
BYTE 0x03 0x0C //Small Shield
BYTE 0x03 0x30 //Mirror Shield
BYTE 0xFF //terminator

progressiveSpinScrollFlags:
BYTE 0x12 0x03 //Spin attack
BYTE 0xFF //terminator

progressiveGreatScrollFlags:
BYTE 0x13 0x0C //Great spin attack
BYTE 0xFF //terminator

progressiveKinstoneBagFlags:
BYTE 0x19 0xC0 //Kinstone Bag
BYTE 0xFF //terminator

progressiveBadSwordFlags:
BYTE 0x01 0x0C //Lantern Sword
BYTE 0xFF //terminator

PUSH; ORG $A4AC8; jumpToHack(progressiveSwap); POP
ALIGN 4
progressiveSwap:
#incbin "asm/progressiveSwap.dmp"
POIN progressiveSwapTable
POIN ($A4AC8+0x08)|1 //return offset if false
POIN ($A4AC8+0x18)|1 //return offset if true
WORD 1

progressiveSwapTable:
BYTE 0x07 0x08 //Bombs -> Remote Bombs
BYTE 0x08 0x07 //Remote Bombs -> Bombs
BYTE 0x09 0x0A //Bow -> Light Arrow
BYTE 0x0A 0x09 //Light Arrow -> Bow
BYTE 0x0B 0x0C //Boomerang -> Magical Boomerang
BYTE 0x0C 0x0B //Magical Boomerang -> Boomerang
//BYTE 0x0D 0x0E //Small Shield -> Mirror Shield
//BYTE 0x0E 0x0D //Mirror Shield -> Small Shield
BYTE 0xFF //terminator

PUSH; ORG $80E3C; jumpToHack(progressivePopups); POP //makes the game show text for items you already own if they are on the progressive list
ALIGN 4
progressivePopups:
#incbin "asm/progressivePopups.dmp"
POIN progressiveItemsTable

PUSH; ORG $52F28; jumpToHack(progressiveGraphics); POP //update graphics based on swapped items
ALIGN 4
progressiveGraphics:
#incbin "asm/progressiveGraphics.dmp"

PUSH; ORG $A6770; jumpToHack(progressiveIcon); POP //show an icon over the items that can be swapped
ALIGN 4
progressiveIcon:
#incbin "asm/progressiveIcon.dmp"
POIN progressiveIconGraphics
#ifdef glitchless
	WORD 1
#else
	WORD 0
#endif
ALIGN 4
progressiveIconGraphics:
#incbin "swapicon.img.bin"

PUSH; ORG $53F44; SHORT 0xD82E; POP //don't switch equipped bombs when getting new ones
PUSH; ORG $53FA0; SHORT 0xD000; POP
PUSH; ORG $53FA4; jumpToHack(bombequipFix); POP
ALIGN 4
bombequipFix:
#incbin "asm/bombequipFix.dmp"

PUSH
ORG $2EAB60
#incbin "extras.img.bin"
POP

//make the lantern sword use the right icon group
PUSH; ORG $125B48; BYTE 1 0 1 4 0 0 0x41 1; POP

PUSH; ORG $42FC; jumpToHack(extraItemIcons); POP
ALIGN 4
extraItemIcons:
#incbin "asm/extraItemIcons.dmp"
POIN extraIconTable

ALIGN 4
extraIconTable:
POIN extraIcon0
POIN extraIcon1
POIN extraIcon2
POIN extraIcon3
POIN extraIcon4

//0x8A to 0x91
ALIGN 4
extraIcon0: 
BYTE 0x8A 0xFF 0x00 0x80 0x01
extraIcon1: 
BYTE 0x8B 0xFF 0x00 0x80 0x01
extraIcon2: 
BYTE 0x8C 0xFF 0x00 0x80 0x01
extraIcon3: 
BYTE 0x8D 0xFF 0x00 0x80 0x01
extraIcon4: 
BYTE 0x8E 0xFF 0x00 0x80 0x01
extraIcon5: 
BYTE 0x8F 0xFF 0x00 0x80 0x01
extraIcon6: 
BYTE 0x90 0xFF 0x00 0x80 0x01
extraIcon7: 
BYTE 0x91 0xFF 0x00 0x80 0x01

//some more sprite data
PUSH
ORG $11AEE8 //SHORT ammount of tiles, base tile
SHORT 4 0x25C
SHORT 4 0x25C+4
SHORT 4 0x25C+4+4
SHORT 4 0x25C+4+4+4
SHORT 4 0x25C+4+4+4+4
SHORT 4 0x25C+4+4+4+4+4
SHORT 4 0x25C+4+4+4+4+4+4
SHORT 4 0x25C+4+4+4+4+4+4+4
POP

PUSH
ORG $2FE02C
WORD extraOAM0-$2F3460
WORD extraOAM1-$2F3460
WORD extraOAM2-$2F3460
WORD extraOAM3-$2F3460
WORD extraOAM4-$2F3460
WORD extraOAM5-$2F3460
WORD extraOAM6-$2F3460
WORD extraOAM7-$2F3460
POP

extraOAM0:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
extraOAM1:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
extraOAM2:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
extraOAM3:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
extraOAM4:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
extraOAM5:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
extraOAM6:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
extraOAM7:
BYTE 1
BYTE 0xF6 0xF6 0x11 0 0x10
